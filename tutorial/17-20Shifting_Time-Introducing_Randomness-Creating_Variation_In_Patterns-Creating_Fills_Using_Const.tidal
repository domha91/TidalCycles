


--Shifting TIme
--shifting patterns by a quarter of a cycle
d1 $ (0.25 <~) $ s "bd*2 cp*2 hh sn"
d1 $ (0.25 ~>) $ s "bd*2 cp*2 hh sn"
--applying shifting conditionally
d1 $ every 3 (0.25 <~) $ s "bd*2 cp*2 hh sn"
d1 $ every 3 (0.25 ~>) $ s "bd*2 cp*2 hh sn"
d1 $ every 3 (0.0625 <~) $ s "bd*2 cp*2 hh sn"
d1 $ every 3 (1000 ~>) $ s "bd*2 cp*2 hh sn"
d1 $ every 3 (1000.125 ~>) $ s "bd*2 cp*2 hh sn"
--However, in the above case every cycle is the same, so you wonâ€™t here a difference between shifting it 1 or 1000 cycles.
--patterns for shift amount
d1 $ "[0 0.25]/4" <~ (s "bd*2 cp*2 hh sn")

--Introducing Randomness
d2 $ "arpy*4"# pan (rand) # n "0 1 5 3"
--As with run and all numeric patterns, the values that rand give you can be scaled, for example the below gives random numbers between 0.25 and 0.75:
d2 $ s "arpy*4" # pan (range 0.25 0.75 $ rand) # n "-2 -1 3 3"
--random int upto 30
d2 $ s "arpy*8" # n  (irand 30) 

--Removing or "Degrading" Pattern events
--50/50 chance
d1 $ s "bd? sd? sd? sd?"
--the following 2 lines are equivalent
d1 $ degrade $ s "bd*16"
d1 $ s "bd*16?"

d1 $ s "bd sn? cp hh?"
d1 $ s "[bd sn cp hh]?"
--Related to degrade is the degradeBy function, where you can specify the probability (from 0 to 1) that events will be removed from a pattern:
d1 $ degradeBy 0.25 $ s "bd*16"
--There is also sometimesBy, which executes a function based on a probability:
d1 $ sometimesBy 0.75 (# crush 4) $ s "bd arpy sn ~"
--The code above has a 75% chance of applying the bitcrush effect pattern # crush 4 on every event in the sound pattern.
--There are other aliases for sometimesBy:

--sometimes = sometimesBy 0.5
--often = sometimesBy 0.75
--rarely = sometimesBy 0.25
--almostNever = sometimesBy 0.1
--almostAlways = sometimesBy 0.9
d1 $ rarely (# crush 4) $ sound "bd*8"

--Creating Variation in Patterns
-- Layering conditional logic
d1 $ every 5 (|+| speed "0.5") $ every 4 (0.25 <~) $ every 3 (rev) $
s "bd sn arpy*2 cp"
#speed "[1 1.25 0.75 -1.5]/3"

--whenmod conditional function
-- when the remainder of the current loop number divided by the first parameter 
-- is greater or equal to the second parameter
d1 $ whenmod 8 6 (rev) $ s "bd*2 arpy*2 cp hh*4"

--Creating "Fills" and using "const"
-- You can think of a "fill" as a regular change to a regular pattern 
-- every and whenmod do pattern function fills
d1 $ every 8 (rev) $ every 4 (density 2) $ s "bd hh sn cp"
d1 $ whenmod 4 2 (#speed "2") $ "bd arpy*2 cp bass2"