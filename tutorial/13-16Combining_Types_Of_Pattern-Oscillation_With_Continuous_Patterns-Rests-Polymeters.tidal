setcps 0.5

do
d1 $ sound "bd <arpy:4 arpy:2 [arpy:3 arpy:1]>"  |*0.175 
d2 $ speed "-1 -0.5 -2 -1.5" # sound "arpy" |*0.5 # vowel "u e u e . i o " 
d3 $ s "~ cp:1" 


--Play a sample at multiple speeds simultaneously
--Use the pattern grouping syntax with a comma to cause speed to play a sample back at multiple speeds at the same time:

d1 $ sound "arpy" # speed "[1, 1.5]" *|0.5
d2 $ speed "[1 0.5, 1.5 2 3 4]" # sound "arpy"
 
                             --12-tone scale speeds
d1 $ speed "-1 -0.75 -0.5" # up " -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11"
  # sound "arpy" |*2

d1 $ up (run 1) # sound "arpy" # vowel "o"
d2 $ speed "[1 0.5, 1.5 2 3 4]" # sound "arpy"

do
  d1 $ sound "<[bd*3] bd bd:2> <clak clak clak:1> <[hh*9] hh hh:3>"
  d2 $ sound "future/3"
  d3 $ n "0 3 7 5 8 12 7 10 14 0 3 7" # s "supermandolin*2"
 
 --combining types of pattern
 
 setcps(159/60/4)
 
 d1 $ sound "bd sn drum arpy" # pan "0 1 0.25 0.75"
 
 --In the code above, the pan pattern determines the rhythm because it is the left-most pattern. The sound pattern now only determines what samples are played at what time. 
 --The sound pattern gets mapped onto the pan pattern.
 --You might be wondering how TidalCycles decides which sound values get matched with which pan values in the above. 
 --The rule is, for each value in the pattern on the left, values from the right are matched where the start (or onset) of the left value,
 --fall within the timespan of the value on the right. For example, the second pan value of 1 starts one third into its pattern, and the second sound value of sn starts one quarter into its pattern, and ends at the halfway point. Because the former onset (one third) falls inside the timespan of the latter timespan (from one quarter until one half), they are matched.
 --The timespan of arpy doesn’t contain any onsets from the pan pattern, and so it doesn’t match with anything, and isn’t played.
 
 d1 $ up "0 0*2 0*4 1" s "[arpy, bass2, bd]"
 
 --Above, the sound pattern is merely specifying three samples to play on every note. Both the rhythm and pitch of these notes is defined by the up pattern.
 --It's also possible to switch things around so that structure comes from the right, by using the operators >|, *|, +|, /| and -|, instead of |>, |*, |+ and |-, for example:
 
 d1 $ s "drum" |> n "0 1*2 ~ 3" --left
 d1 $ s "drum" >|  n "0 1*2 ~ 3" --right
 
 --The side of the operator that the | is on, is where the structure comes from. In fact, if you put the bar on both sides, structure comes from both sides:
 
 d1 $ s "drum cp" |> n "0 1 2 " -- left
 d1 $ s "drum cp" |>| n "0 1 2 " -- both?
 
 --Oscillation with Continuous Patterns
 --using a sine pattern to oscillate between left and right speakers
 d1 $ s "bd*16" # pan sine
 d1 $ s "bd*8 sn*8" # pan (density 1.75 $ tri)
 d1 $ s "bd*8 sn*8" # speed (density 2 $ tri)
 
 d1 $ s "bd*16" # pan (fast cat [sine,saw, square, tri])
 d1 $ s "sn:2*16" # speed ((range 0.5 3 sine) * (slow "4 3 2 1" saw))
 
 --Scaling oscillation
 --range replaced scale which has been repurposed.
 d1 $ s "bd*8 sn*8" # speed (range 1 3 $ tri)
 d1 $ s "bd*8 sn*8" # speed (slow 4 $ range 1 3 $ tri)
 --negative values are wrapped in parentheses. 
 d1 $ s "bd*8 sn*8" # speed (range (-2) 3 $ tri)
 --slow low pass filter cutoff sweep
 d1 $ s "hh*32" # cutoff (range 300 1000 $ slow 4 $ sine) # resonance "0.4"
 
 --Rests
 d1 $ s "bd bd ~ bd"
 
 --Polymeters
 -- 5 note rhythm over the pulse of a 4 note rhythm
 d1 $ s "{bd hh sn cp, arpy bass2 drum notes can}"
 -- 4 note rhythm over a 5 note rhythm
 d1 $ s "{arpy bass2 drum notes can, bd hh sn cp}"
 --polymeter using rests for base rhythm
 d1 $ s "{~ ~ ~ ~, arpy bass2 drum notes can}"
 --same thing using %4
 d1 $ s "{arpy bass2 drum notes can}%4"
